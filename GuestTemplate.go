package main

const GuestTemplate = `
# Code generated by OpenFFI. DO NOT EDIT.
# Guest code for {{.ProtoIDLFilename}}

from {{.ProtobufFilename}} import *
import traceback
import sys
from typing import Tuple

{{range $mindex, $m := .Modules}}
# Code to call foreign functions in module {{$m.Name}}
import {{$m.Name}}

{{range $findex, $f := $m.Functions}}

# Call to foreign {{.ForeignFunctionName}}
def Foreign{{$f.ForeignFunctionName}}(paramsVal: bytes) -> Tuple[bytes,str]:
	try:
		req = {{$f.ProtobufRequestStruct}}()
		req.ParseFromString(paramsVal)
		
		{{range $index, $elem := $f.ExpandedReturn}}{{if $index}},{{end}}{{$elem.Name}}{{end}}{{if $f.ExpandedReturn}} = {{end}}{{$m.Name}}.{{$f.ForeignFunctionName}}({{range $index, $elem := $f.ExpandedParameters}}{{if $index}},{{end}} req.{{$elem.Name}}{{end}})

		ret = {{$f.ProtobufResponseStruct}}()

		{{range $index, $elem := $f.ExpandedReturn}}
		if getattr(ret.{{$elem.Name}}, 'extend', None) != None: # if repeated value, use append
			ret.{{$elem.Name}}.extend({{$elem.Name}})
		elif getattr(ret.{{$elem.Name}}, 'CopyFrom', None) != None: # if proto message
			ret.{{$elem.Name}}.CopyFrom({{$elem.Name}})
		else:
			ret.{{$elem.Name}} = {{$elem.Name}}
		{{end}}

		return ret.SerializeToString(), None

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return None, '\n'.join(errdata)

{{end}}

{{end}}
`
