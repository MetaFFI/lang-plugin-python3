
# Code generated by MetaFFI. Modify only in marked places.
# Guest code for py_extractor.json

import traceback
import sys
import platform
import os
from typing import Any
from ctypes import *


import py_extractor

python_plugin_handle = None
def load_python_plugin():
	global python_plugin_handle
	
	if python_plugin_handle == None:
		python_plugin_handle = cdll.LoadLibrary(get_filename_to_load('xllr.python3'))
		python_plugin_handle.set_entrypoint.argstype = [c_char_p, c_void_p]
		python_plugin_handle.xcall_params_ret.argstype = [c_int, py_object, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong)]
		python_plugin_handle.xcall_params_no_ret.argstype = [c_int, py_object, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong)]
		python_plugin_handle.xcall_no_params_ret.argstype = [c_int, py_object, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong)]
		python_plugin_handle.xcall_no_params_no_ret.argstype = [c_int, py_object, POINTER(c_char_p), POINTER(c_ulonglong)]

def get_filename_to_load(fname):
	osname = platform.system()
	if osname == 'Windows':
		return os.getenv('METAFFI_HOME')+'\\'+ fname + '.dll'
	elif osname == 'Darwin':
		return os.getenv('METAFFI_HOME')+'/' + fname + '.dylib'
	else:
		return os.getenv('METAFFI_HOME')+'/' + fname + '.so' # for everything that is not windows or mac, return .so

def dynamicTypeToMetaFFIType(obj):
	if isinstance(obj, float):
		return 1
	elif isinstance(obj, str):
		return 4096
	elif isinstance(obj, int):
		return 32
	elif isinstance(obj, bool):
		return 1024
	else:
		return 32768


load_python_plugin()













@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_variable_info_get_name_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_variable_info_get_name_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_variable_info_get_name_Overload'.encode(), CEntryPoint_variable_info_get_name_Overload)

def EntryPoint_variable_info_get_name(*obj):
	try:

		
		ret_val_types = (4096,)

		if len(obj) != 1:
			raise ValueError('received parameter in variable_info_get_name expects exactly one parameter')

		return (None, ret_val_types, obj[0].name)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)





@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_variable_info_get_type_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_variable_info_get_type_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_variable_info_get_type_Overload'.encode(), CEntryPoint_variable_info_get_type_Overload)

def EntryPoint_variable_info_get_type(*obj):
	try:

		
		ret_val_types = (4096,)

		if len(obj) != 1:
			raise ValueError('received parameter in variable_info_get_type expects exactly one parameter')

		return (None, ret_val_types, obj[0].type)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)





@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_variable_info_get_is_getter_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_variable_info_get_is_getter_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_variable_info_get_is_getter_Overload'.encode(), CEntryPoint_variable_info_get_is_getter_Overload)

def EntryPoint_variable_info_get_is_getter(*obj):
	try:

		
		ret_val_types = (1024,)

		if len(obj) != 1:
			raise ValueError('received parameter in variable_info_get_is_getter expects exactly one parameter')

		return (None, ret_val_types, obj[0].is_getter)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)





@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_variable_info_get_is_setter_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_variable_info_get_is_setter_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_variable_info_get_is_setter_Overload'.encode(), CEntryPoint_variable_info_get_is_setter_Overload)

def EntryPoint_variable_info_get_is_setter(*obj):
	try:

		
		ret_val_types = (1024,)

		if len(obj) != 1:
			raise ValueError('received parameter in variable_info_get_is_setter expects exactly one parameter')

		return (None, ret_val_types, obj[0].is_setter)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)








@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_variable_info_Releasevariable_info_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(1, py_object(EntryPoint_variable_info_Releasevariable_info_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_variable_info_Releasevariable_info_Overload'.encode(), CEntryPoint_variable_info_Releasevariable_info_Overload)

def EntryPoint_variable_info_Releasevariable_info_Overload(*vals):
	try:

		if len(vals) != 1:
			raise ValueError('received parameter in variable_info_Releasevariable_info_Overload expects exactly one parameter')

		# xcall release object
		python_plugin_handle.release_object(vals[0])
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)







@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_parameter_info_get_name_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_parameter_info_get_name_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_parameter_info_get_name_Overload'.encode(), CEntryPoint_parameter_info_get_name_Overload)

def EntryPoint_parameter_info_get_name(*obj):
	try:

		
		ret_val_types = (4096,)

		if len(obj) != 1:
			raise ValueError('received parameter in parameter_info_get_name expects exactly one parameter')

		return (None, ret_val_types, obj[0].name)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)





@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_parameter_info_get_type_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_parameter_info_get_type_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_parameter_info_get_type_Overload'.encode(), CEntryPoint_parameter_info_get_type_Overload)

def EntryPoint_parameter_info_get_type(*obj):
	try:

		
		ret_val_types = (4096,)

		if len(obj) != 1:
			raise ValueError('received parameter in parameter_info_get_type expects exactly one parameter')

		return (None, ret_val_types, obj[0].type)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)





@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_parameter_info_get_is_default_value_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_parameter_info_get_is_default_value_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_parameter_info_get_is_default_value_Overload'.encode(), CEntryPoint_parameter_info_get_is_default_value_Overload)

def EntryPoint_parameter_info_get_is_default_value(*obj):
	try:

		
		ret_val_types = (1024,)

		if len(obj) != 1:
			raise ValueError('received parameter in parameter_info_get_is_default_value expects exactly one parameter')

		return (None, ret_val_types, obj[0].is_default_value)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)





@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_parameter_info_get_is_optional_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_parameter_info_get_is_optional_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_parameter_info_get_is_optional_Overload'.encode(), CEntryPoint_parameter_info_get_is_optional_Overload)

def EntryPoint_parameter_info_get_is_optional(*obj):
	try:

		
		ret_val_types = (1024,)

		if len(obj) != 1:
			raise ValueError('received parameter in parameter_info_get_is_optional expects exactly one parameter')

		return (None, ret_val_types, obj[0].is_optional)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)





@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_parameter_info_get_kind_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_parameter_info_get_kind_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_parameter_info_get_kind_Overload'.encode(), CEntryPoint_parameter_info_get_kind_Overload)

def EntryPoint_parameter_info_get_kind(*obj):
	try:

		
		ret_val_types = (4096,)

		if len(obj) != 1:
			raise ValueError('received parameter in parameter_info_get_kind expects exactly one parameter')

		return (None, ret_val_types, obj[0].kind)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)








@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_parameter_info_Releaseparameter_info_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(1, py_object(EntryPoint_parameter_info_Releaseparameter_info_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_parameter_info_Releaseparameter_info_Overload'.encode(), CEntryPoint_parameter_info_Releaseparameter_info_Overload)

def EntryPoint_parameter_info_Releaseparameter_info_Overload(*vals):
	try:

		if len(vals) != 1:
			raise ValueError('received parameter in parameter_info_Releaseparameter_info_Overload expects exactly one parameter')

		# xcall release object
		python_plugin_handle.release_object(vals[0])
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)







@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_function_info_get_name_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_function_info_get_name_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_function_info_get_name_Overload'.encode(), CEntryPoint_function_info_get_name_Overload)

def EntryPoint_function_info_get_name(*obj):
	try:

		
		ret_val_types = (4096,)

		if len(obj) != 1:
			raise ValueError('received parameter in function_info_get_name expects exactly one parameter')

		return (None, ret_val_types, obj[0].name)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)





@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_function_info_get_comment_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_function_info_get_comment_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_function_info_get_comment_Overload'.encode(), CEntryPoint_function_info_get_comment_Overload)

def EntryPoint_function_info_get_comment(*obj):
	try:

		
		ret_val_types = (4096,)

		if len(obj) != 1:
			raise ValueError('received parameter in function_info_get_comment expects exactly one parameter')

		return (None, ret_val_types, obj[0].comment)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)





@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_function_info_get_parameters_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_function_info_get_parameters_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_function_info_get_parameters_Overload'.encode(), CEntryPoint_function_info_get_parameters_Overload)

def EntryPoint_function_info_get_parameters(*obj):
	try:

		
		ret_val_types = (98304,)

		if len(obj) != 1:
			raise ValueError('received parameter in function_info_get_parameters expects exactly one parameter')

		return (None, ret_val_types, obj[0].parameters)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)





@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_function_info_get_return_values_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_function_info_get_return_values_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_function_info_get_return_values_Overload'.encode(), CEntryPoint_function_info_get_return_values_Overload)

def EntryPoint_function_info_get_return_values(*obj):
	try:

		
		ret_val_types = (69632,)

		if len(obj) != 1:
			raise ValueError('received parameter in function_info_get_return_values expects exactly one parameter')

		return (None, ret_val_types, obj[0].return_values)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)








@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_function_info_Releasefunction_info_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(1, py_object(EntryPoint_function_info_Releasefunction_info_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_function_info_Releasefunction_info_Overload'.encode(), CEntryPoint_function_info_Releasefunction_info_Overload)

def EntryPoint_function_info_Releasefunction_info_Overload(*vals):
	try:

		if len(vals) != 1:
			raise ValueError('received parameter in function_info_Releasefunction_info_Overload expects exactly one parameter')

		# xcall release object
		python_plugin_handle.release_object(vals[0])
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)







@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_class_info_get_name_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_class_info_get_name_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_class_info_get_name_Overload'.encode(), CEntryPoint_class_info_get_name_Overload)

def EntryPoint_class_info_get_name(*obj):
	try:

		
		ret_val_types = (4096,)

		if len(obj) != 1:
			raise ValueError('received parameter in class_info_get_name expects exactly one parameter')

		return (None, ret_val_types, obj[0].name)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)





@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_class_info_get_comment_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_class_info_get_comment_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_class_info_get_comment_Overload'.encode(), CEntryPoint_class_info_get_comment_Overload)

def EntryPoint_class_info_get_comment(*obj):
	try:

		
		ret_val_types = (4096,)

		if len(obj) != 1:
			raise ValueError('received parameter in class_info_get_comment expects exactly one parameter')

		return (None, ret_val_types, obj[0].comment)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)





@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_class_info_get_fields_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_class_info_get_fields_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_class_info_get_fields_Overload'.encode(), CEntryPoint_class_info_get_fields_Overload)

def EntryPoint_class_info_get_fields(*obj):
	try:

		
		ret_val_types = (98304,)

		if len(obj) != 1:
			raise ValueError('received parameter in class_info_get_fields expects exactly one parameter')

		return (None, ret_val_types, obj[0].fields)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)





@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_class_info_get_methods_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_class_info_get_methods_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_class_info_get_methods_Overload'.encode(), CEntryPoint_class_info_get_methods_Overload)

def EntryPoint_class_info_get_methods(*obj):
	try:

		
		ret_val_types = (98304,)

		if len(obj) != 1:
			raise ValueError('received parameter in class_info_get_methods expects exactly one parameter')

		return (None, ret_val_types, obj[0].methods)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)








@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_class_info_Releaseclass_info_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(1, py_object(EntryPoint_class_info_Releaseclass_info_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_class_info_Releaseclass_info_Overload'.encode(), CEntryPoint_class_info_Releaseclass_info_Overload)

def EntryPoint_class_info_Releaseclass_info_Overload(*vals):
	try:

		if len(vals) != 1:
			raise ValueError('received parameter in class_info_Releaseclass_info_Overload expects exactly one parameter')

		# xcall release object
		python_plugin_handle.release_object(vals[0])
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)







@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_py_info_get_globals_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_py_info_get_globals_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_py_info_get_globals_Overload'.encode(), CEntryPoint_py_info_get_globals_Overload)

def EntryPoint_py_info_get_globals(*obj):
	try:

		
		ret_val_types = (98304,)

		if len(obj) != 1:
			raise ValueError('received parameter in py_info_get_globals expects exactly one parameter')

		return (None, ret_val_types, obj[0].globals)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)





@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_py_info_get_functions_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_py_info_get_functions_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_py_info_get_functions_Overload'.encode(), CEntryPoint_py_info_get_functions_Overload)

def EntryPoint_py_info_get_functions(*obj):
	try:

		
		ret_val_types = (98304,)

		if len(obj) != 1:
			raise ValueError('received parameter in py_info_get_functions expects exactly one parameter')

		return (None, ret_val_types, obj[0].functions)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)





@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_py_info_get_classes_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_py_info_get_classes_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_py_info_get_classes_Overload'.encode(), CEntryPoint_py_info_get_classes_Overload)

def EntryPoint_py_info_get_classes(*obj):
	try:

		
		ret_val_types = (98304,)

		if len(obj) != 1:
			raise ValueError('received parameter in py_info_get_classes expects exactly one parameter')

		return (None, ret_val_types, obj[0].classes)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)








@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_py_info_Releasepy_info_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(1, py_object(EntryPoint_py_info_Releasepy_info_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_py_info_Releasepy_info_Overload'.encode(), CEntryPoint_py_info_Releasepy_info_Overload)

def EntryPoint_py_info_Releasepy_info_Overload(*vals):
	try:

		if len(vals) != 1:
			raise ValueError('received parameter in py_info_Releasepy_info_Overload expects exactly one parameter')

		# xcall release object
		python_plugin_handle.release_object(vals[0])
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_py_extractor_py_extractor_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_py_extractor_py_extractor_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_py_extractor_py_extractor_Overload'.encode(), CEntryPoint_py_extractor_py_extractor_Overload)

def EntryPoint_py_extractor_py_extractor(*vals, **named_vals):
	try:
		# call constructor
		new_instance = py_extractor.py_extractor(*vals, **named_vals)
		
		
		ret_val_types = (32768,)

		return ( None, ret_val_types , new_instance)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)





@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_py_extractor_extract_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(1, py_object(EntryPoint_py_extractor_extract_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_py_extractor_extract_Overload'.encode(), CEntryPoint_py_extractor_extract_Overload)

def EntryPoint_py_extractor_extract(*vals, **named_vals):
	try:
		# call method
		
		
		info = vals[0].extract(**named_vals)
		
		
		
		ret_val_types = (32768,)

		return ( None, ret_val_types , info)
		
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)
	



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_py_extractor_Releasepy_extractor_Overload(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(1, py_object(EntryPoint_py_extractor_Releasepy_extractor_Overload), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_py_extractor_Releasepy_extractor_Overload'.encode(), CEntryPoint_py_extractor_Releasepy_extractor_Overload)

def EntryPoint_py_extractor_Releasepy_extractor_Overload(*vals):
	try:

		if len(vals) != 1:
			raise ValueError('received parameter in py_extractor_Releasepy_extractor_Overload expects exactly one parameter')

		# xcall release object
		python_plugin_handle.release_object(vals[0])
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)





