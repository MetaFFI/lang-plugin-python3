package main


const GuestHeaderTemplate = `
# Code generated by MetaFFI. Modify only in marked places.
# Guest code for {{.IDLFilenameWithExtension}}
`

const GuestImportsTemplate = `
import traceback
import sys
import platform
import os
from typing import Any
from ctypes import *

{{range $mindex, $i := .Imports}}
import {{$i}}{{end}}
`

const GuestHelperFunctions = `


python_plugin_handle = None
def load_python_plugin():
	global python_plugin_handle
	
	if python_plugin_handle == None:
		python_plugin_handle = cdll.LoadLibrary(get_filename_to_load('xllr.python3'))
		python_plugin_handle.set_entrypoint.argstype = [c_char_p, c_void_p]
		python_plugin_handle.xcall_params_ret.argstype = [py_object, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong)]
		python_plugin_handle.xcall_params_no_ret.argstype = [py_object, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong)]
		python_plugin_handle.xcall_no_params_ret.argstype = [py_object, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong)]
		python_plugin_handle.xcall_no_params_no_ret.argstype = [py_object, POINTER(c_char_p), POINTER(c_ulonglong)]

def get_filename_to_load(fname):
	osname = platform.system()
	if osname == 'Windows':
		return os.getenv('METAFFI_HOME')+'\\'+ fname + '.dll'
	elif osname == 'Darwin':
		return os.getenv('METAFFI_HOME')+'/' + fname + '.dylib'
	else:
		return os.getenv('METAFFI_HOME')+'/' + fname + '.so' # for everything that is not windows or mac, return .so

load_python_plugin()
`

const GuestFunctionXLLRTemplate = `
{{range $mindex, $m := .Modules}}

{{range $findex, $f := $m.Globals}}
{{if $f.Getter}}{{$retvalLength := len $f.Getter.ReturnValues}}
{{GenerateCEntryPoint $f.Getter.Name $f.Getter.Parameters $f.Getter.ReturnValues 0}}
def EntryPoint_{{$f.Getter.Name}}():
	ret_val_types = ({{range $index, $elem := $f.Getter.ReturnValues}}{{if $index}}, {{end}}{{GetMetaFFIType $elem}}{{end}}{{if eq $retvalLength 1}},{{end}})
	return (None, ret_val_types, {{$f.Getter.FunctionPath.module}}.{{$f.Name}})

{{end}}{{/* end getter */}}
{{if $f.Setter}}{{$retvalLength := len $f.Setter.ReturnValues}}
{{GenerateCEntryPoint $f.Setter.Name $f.Setter.Parameters $f.Setter.ReturnValues 0}}
def EntryPoint_{{$f.Setter.Name}}(val):
	ret_val_types = ({{range $index, $elem := $f.Setter.ReturnValues}}{{if $index}}, {{end}}{{GetMetaFFIType $elem}}{{end}}{{if eq $retvalLength 1}},{{end}})
	{{$f.Setter.FunctionPath.module}}.{{$f.Name}} = val
	return (None, ret_val_types)

{{end}}{{/* end setter */}}
{{end}}{{/* end globals */}}


{{range $findex, $f := $m.Functions}}
# Call to foreign {{$f.Name}}
{{GenerateCEntryPoint $f.Name $f.Parameters $f.ReturnValues 0}}
def EntryPoint_{{$f.Name}}({{range $index, $elem := $f.Parameters}}{{if $index}},{{end}}{{$elem.Name}}{{end}}):
	try:
		# call function
		{{range $index, $elem := $f.ReturnValues}}{{if $index}},{{end}}{{$elem.Name}}{{end}}{{if $f.ReturnValues}} = {{end}}{{$f.FunctionPath.module}}.{{$f.Name}}({{range $index, $elem := $f.Parameters}}{{if $index}},{{end}}{{$elem.Name}}{{end}})
		{{$retvalLength := len $f.ReturnValues}}
		ret_val_types = ({{range $index, $elem := $f.ReturnValues}}{{if $index}}, {{end}}{{GetMetaFFIType $elem}}{{end}}{{if eq $retvalLength 1}},{{end}})

		return ( None, ret_val_types {{range $index, $elem := $f.ReturnValues}}, {{$elem.Name}}{{end}})

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)

{{end}}{{/* End function */}}

{{range $classindex, $c := $m.Classes}}
{{range $cstrindex, $f := $c.Constructors}}
{{GenerateCEntryPoint (print $c.Name "_" $f.Name) $f.Parameters $f.ReturnValues 0}}
def EntryPoint_{{$c.Name}}_{{$f.Name}}({{range $index, $elem := $f.Parameters}}{{if $index}},{{end}}{{$elem.Name}}{{end}}):
	try:
		# call constructor
		{{range $index, $elem := $f.ReturnValues}}{{if $index}},{{end}}{{$elem.Name}}{{end}}{{if $f.ReturnValues}} = {{end}}{{$f.FunctionPath.module}}.{{$f.Name}}({{range $index, $elem := $f.Parameters}}{{if $index}},{{end}}{{$elem.Name}}{{end}})
		
		{{$retvalLength := len $f.ReturnValues}}
		ret_val_types = ({{range $index, $elem := $f.ReturnValues}}{{if $index}}, {{end}}{{GetMetaFFIType $elem}}{{end}}{{if eq $retvalLength 1}},{{end}})

		return ( None, ret_val_types {{range $index, $elem := $f.ReturnValues}}, {{$elem.Name}}{{end}})

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)
{{end}}{{/* End Constructors */}}

{{range $findex, $f := $c.Fields}}
{{if $f.Getter}}
{{GenerateCEntryPoint (print $c.Name "_" $f.Getter.Name) $f.Getter.Parameters $f.Getter.ReturnValues 0}}
def EntryPoint_{{$c.Name}}_{{$f.Getter.Name}}(obj):
	try:

		{{$retvalLength := len $f.Getter.ReturnValues}}
		ret_val_types = ({{range $index, $elem := $f.Getter.ReturnValues}}{{if $index}}, {{end}}{{GetMetaFFIType $elem}}{{end}}{{if eq $retvalLength 1}},{{end}})

		return (None, ret_val_types, obj.{{$f.Name}})
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)

{{end}}{{/* End Getter */}}
{{if $f.Setter}}
{{GenerateCEntryPoint (print $c.Name "_" $f.Setter.Name) $f.Setter.Parameters $f.Setter.ReturnValues 0}}
def EntryPoint_{{$c.Name}}_{{$f.Setter.Name}}(obj, val):
	try:

		obj.{{$f.Name}} = val

		{{$retvalLength := len $f.Setter.ReturnValues}}
		ret_val_types = ({{range $index, $elem := $f.Setter.ReturnValues}}{{if $index}}, {{end}}{{GetMetaFFIType $elem}}{{end}}{{if eq $retvalLength 1}},{{end}})

		return (None, ret_val_types)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)

{{end}}{{/* End Setter */}}
{{end}}{{/* End Fields */}}

{{range $methindex, $f := $c.Methods}}
{{GenerateCEntryPoint (print $c.Name "_" $f.Name) $f.Parameters $f.ReturnValues 0}}
def EntryPoint_{{$c.Name}}_{{$f.Name}}({{range $index, $elem := $f.Parameters}}{{if $index}},{{end}}{{$elem.Name}}{{end}}):
	try:
		# call method
		{{range $index, $elem := $f.ReturnValues}}{{if $index}},{{end}}{{$elem.Name}}{{end}}{{if $f.ReturnValues}} = {{end}}{{(index $f.Parameters 0).Name }}.{{$f.Name}}({{range $index, $elem := $f.Parameters}}{{if $index}}{{if gt $index 1}},{{end}}{{$elem.Name}}{{end}}{{end}})
		
		{{$retvalLength := len $f.ReturnValues}}
		ret_val_types = ({{range $index, $elem := $f.ReturnValues}}{{if $index}}, {{end}}{{GetMetaFFIType $elem}}{{end}}{{if eq $retvalLength 1}},{{end}})

		return ( None, ret_val_types {{range $index, $elem := $f.ReturnValues}}, {{$elem.Name}}{{end}})
		
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)
	
{{end}}{{/* End methods */}}

{{if $c.Releaser}}
{{GenerateCEntryPoint (print $c.Name "_" $c.Releaser.Name) $c.Releaser.Parameters $c.Releaser.ReturnValues 0}}
def EntryPoint_{{$c.Name}}_{{$c.Releaser.Name}}({{range $index, $elem := $c.Releaser.Parameters}}{{if $index}},{{end}}{{$elem.Name}}{{end}}):
	try:
		# xcall release object
		{{ $h := index $c.Releaser.Parameters 0 }}
		python_plugin_handle.release_object({{$h.Name}})
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)
{{end}}{{/* End Releaser */}}

{{end}}{{/* End Classes */}}

{{end}}{{/* End modules */}}
`
